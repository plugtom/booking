// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model User {
  id               Int                @id @default(autoincrement())
  role             Role               @default(USER)
  username         String?            @map("user_name")
  email            String             @unique
  password         String
  phone            String?
  gender           String
  point            Int                @default(0)
  Product          Product[]
  Cart             Cart?
  Order            Order[]
  payment          payment[]
  Shipping_Address Shipping_Address[]
}

model Shipping_Address {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int      @map("user_id")
  firstName      String   @map("first_name")
  lastName       String   @map("last_name")
  phone          String
  identityNumber DateTime @map("identity_number") @db.Date
  branch         String?
  address        String
  postalCode     String   @map("postal_code")
  province       String
  district       String
  subDistrict    String   @map("sub_district")
  img            String
  Order          Order[]
}

model Cart {
  id                  Int     @id @default(autoincrement())
  totalBeforeDiscount Int     @default(0) @map("total_before_discount")
  deliveryFee         Int     @default(0) @map("delivery_fee")
  total               Int     @default(0)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int     @unique @map("user_id")
  product             Product @relation(fields: [productId], references: [id])
  productId           Int     @map("product_id")
}

model Order {
  id                  Int              @id @default(autoincrement())
  totalBeforeDiscount Int              @default(0) @map("total_before_discount")
  deliveryFee         Int              @default(0) @map("delivery_fee")
  total               Int              @default(0)
  createdAt           DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int              @map("user_id")
  quantity            Int              @default(1)
  product             Product          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId           Int              @map("product_id")
  ShippingAddress     Shipping_Address @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shippingAddressId   Int              @map("shipping_address_id")
  payment             payment[]
}

model payment {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int      @map("order_Id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int      @map("user_id")
  amount      Int
  moneystatus Boolean  @map("money_status")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  details     String
}

model Product {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int           @map("user_id")
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId      Int
  stock           Int?          @default(0)
  title           String? //ชื่อหนังสือ
  price           Int?          @map("price")
  detail          String? //รายละเอียด
  yearpublication DateTime?     @map("year_publication")
  numberpages     String?       @map("number_pages")
  nameauthor      String?       @map("name_author")
  Product_img     Product_img[]
  cart            Cart[]
  order           Order[]
}

model Product_img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  count   Int       @default(0)
  Product Product[]
}
